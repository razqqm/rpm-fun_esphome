esphome:
  name: rpm-fun
  friendly_name: rpm-fun
  min_version: 2024.12.4
  build_path: build/rpm-fun

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

logger:
  level: INFO
  logs:
    pulse_counter: INFO

api:
  encryption:
    key: !secret api_ha

ota:
  - platform: esphome
    password: !secret ota_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  on_connect:
    then:
      - script.execute: init_pwm    # При подключении обновляем PWM по сохранённым значениям
      - light.turn_on:
          id: led_ring
          brightness: !lambda 'return id(led_brightness).state;'
          red: 0%
          green: 100%
          blue: 0%
  on_disconnect:
    then:
      - light.turn_on:
          id: led_ring
          brightness: !lambda 'return id(led_brightness).state;'
          red: 100%
          green: 0%
          blue: 100%
      - delay: 500ms
      - light.turn_on:
          id: led_ring
      - delay: 500ms
  ap:
    ssid: "Rpm-Fun Fallback Hotspot"
    password: "uStrxuFDPIOY"

captive_portal:

font:
  - file: 'gfonts://Roboto@300'  # Light
    id: roboto_light_font
    size: 12

i2c:
  sda: 41
  scl: 40
  frequency: 400kHz

time:
  - platform: sntp
    id: sntp_time

### Сенсоры оборотов вентиляторов (6 шт.)
sensor:
  - platform: pulse_counter
    name: "Fan RPM 1 (GPIO5)"
    id: fan_rpm_1
    pin: GPIO5
    update_interval: never
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    icon: "mdi:fan"
    use_pcnt: true
    filters:
      - lambda: |-
          int rpm = x / 2.0;
          ESP_LOGI("RPM", "Fan 1 (GPIO5) Speed: %d RPM", rpm);
          return rpm;
      - filter_out: nan

  - platform: pulse_counter
    name: "Fan RPM 2 (GPIO6)"
    id: fan_rpm_2
    pin: GPIO6
    update_interval: never
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    icon: "mdi:fan"
    use_pcnt: true
    filters:
      - lambda: |-
          int rpm = x / 2.0;
          ESP_LOGI("RPM", "Fan 2 (GPIO6) Speed: %d RPM", rpm);
          return rpm;
      - filter_out: nan

  - platform: pulse_counter
    name: "Fan RPM 3 (GPIO7)"
    id: fan_rpm_3
    pin: GPIO7
    update_interval: never
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    icon: "mdi:fan"
    use_pcnt: true
    filters:
      - lambda: |-
          int rpm = x / 2.0;
          ESP_LOGI("RPM", "Fan 3 (GPIO7) Speed: %d RPM", rpm);
          return rpm;
      - filter_out: nan

  - platform: pulse_counter
    name: "Fan RPM 4 (GPIO8)"
    id: fan_rpm_4
    pin: GPIO8
    update_interval: never
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    icon: "mdi:fan"
    use_pcnt: true
    filters:
      - lambda: |-
          int rpm = x / 2.0;
          ESP_LOGI("RPM", "Fan 4 (GPIO8) Speed: %d RPM", rpm);
          return rpm;
      - filter_out: nan

  - platform: pulse_counter
    name: "Fan RPM 5 (GPIO9)"
    id: fan_rpm_5
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
    update_interval: never
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    icon: "mdi:fan"
    use_pcnt: false
    internal_filter: 13us
    filters:
      - lambda: |-
          int rpm = x / 2.0;
          ESP_LOGI("RPM", "Fan 5 (GPIO9) Speed: %d RPM", rpm);
          return rpm;
      - filter_out: nan

  - platform: pulse_counter
    name: "Fan RPM 6 (GPIO36)"
    id: fan_rpm_6
    pin:
      number: GPIO36
      mode: INPUT_PULLUP
    update_interval: never
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    icon: "mdi:fan"
    use_pcnt: false
    internal_filter: 13us
    filters:
      - lambda: |-
          int rpm = x / 2.0;
          ESP_LOGI("RPM", "Fan 6 (GPIO36) Speed: %d RPM", rpm);
          return rpm;
      - filter_out: nan

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_sensor
    update_interval: 60s
    unit_of_measurement: "%"     # изменена единица измерения на проценты
    icon: "mdi:wifi"
    filters:
      - lambda: |-
          if (isnan(x)) return x;
          int quality = (int)((x + 100) * 2.0);
          if (quality < 0) quality = 0;
          if (quality > 100) quality = 100;
          return quality;

### Кнопка перезагрузки (Restart)
switch:
  - platform: restart
    name: "Restart rpm-fun"

### (При необходимости) Блок OLED-дисплея (закомментирован)
#display:
#  - platform: ssd1306_i2c
#    model: "SSD1306 72x40"
#    address: 0x3C
#    rotation: 0
#    brightness: 1
#    id: my_display
#    lambda: |-
#      it.printf(0, 0, id(font1), "F1:%d F2:%d", int(id(fan_rpm_1).state), int(id(fan_rpm_2).state));
#      it.printf(0, 10, id(font1), "F3:%d F4:%d", int(id(fan_rpm_3).state), int(id(fan_rpm_4).state));
#      it.printf(0, 20, id(font1), "F5:%d F6:%d", int(id(fan_rpm_5).state), int(id(fan_rpm_6).state));
#      if (id(sntp_time).now().is_valid()) {
#        it.printf(0, 30, id(font1), "%02d:%02d:%02d", id(sntp_time).now().hour,
#                                                     id(sntp_time).now().minute,
#                                                     id(sntp_time).now().second);
#      } else {
#        it.print(0, 30, id(font1), "Time: N/A");
#      }
#      if (id(wifi_signal_sensor).has_state()) {
#        int quality = (int)((id(wifi_signal_sensor).state + 100) * 2.0);
#        quality = quality < 0 ? 0 : (quality > 100 ? 100 : quality);
#        it.printf(0, 40, id(font1), "WiFi: %d%%", quality);
#      } else {
#        it.print(0, 40, id(font1), "WiFi: N/A");
#      }

### Скрипты
script:
  - id: rpm_update_loop
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return true;'
          then:
            - component.update: fan_rpm_1
            - component.update: fan_rpm_2
            - component.update: fan_rpm_3
            - component.update: fan_rpm_4
            - component.update: fan_rpm_5
            - component.update: fan_rpm_6
            - delay: !lambda 'return id(rpm_update_interval).state * 1000;'

  - id: init_pwm
    then:
      - lambda: |-
          // Устанавливаем PWM-выходы по сохранённым значениям (например, 50% => 0.5)
          id(pwm_fan_1).set_level(id(fan_speed_1).state / 100.0);
          id(pwm_fan_2).set_level(id(fan_speed_2).state / 100.0);
          id(pwm_fan_3).set_level(id(fan_speed_3).state / 100.0);
          id(pwm_fan_4).set_level(id(fan_speed_4).state / 100.0);

### Интервальные действия (для LED-индикации и проверки показаний)
interval:
  - interval: 1s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - light.turn_on:
                id: led_ring
                brightness: !lambda 'return id(led_brightness).state;'
                red: 0%
                green: 100%
                blue: 0%
          else:
            - light.turn_on:
                id: led_ring
                brightness: !lambda 'return id(led_brightness).state;'
                red: 100%
                green: 0%
                blue: 100%
            - delay: 500ms
            - light.turn_off:
                id: led_ring
            - delay: 500ms
  - interval: 500ms
    then:
      - if:
          condition:
            lambda: 'return (id(fan_rpm_1).state > 0 || id(fan_rpm_2).state > 0 || id(fan_rpm_3).state > 0 || id(fan_rpm_4).state > 0 || id(fan_rpm_5).state > 0 || id(fan_rpm_6).state > 0);'
          then:
            - light.turn_on:
                id: led_ring
                brightness: !lambda 'return id(led_brightness).state;'
                red: 100%
                green: 100%
                blue: 0%
            - delay: 200ms
            - light.turn_off:
                id: led_ring
            - delay: 200ms

### Числовые параметры (регулировка яркости, интервала обновления и скорости вентиляторов)
number:
  - platform: template
    id: led_brightness
    name: "LED Brightness"
    min_value: 0
    max_value: 1
    step: 0.01
    initial_value: 0.2
    restore_value: true
    optimistic: true
  - platform: template
    id: rpm_update_interval
    name: "RPM Update Interval"
    min_value: 1
    max_value: 60
    step: 1
    initial_value: 30
    restore_value: true
    optimistic: true
    on_value:
      then:
        - script.execute: rpm_update_loop
  - platform: template
    id: fan_speed_1
    name: "Fan Speed 1 (GPIO17)"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 50
    restore_value: true
    optimistic: true
    set_action:
      - lambda: |-
          id(pwm_fan_1).set_level(x / 100.0);
          id(fan_speed_1).publish_state(x);
  - platform: template
    id: fan_speed_2
    name: "Fan Speed 2 (GPIO18)"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 50
    restore_value: true
    optimistic: true
    set_action:
      - lambda: |-
          id(pwm_fan_2).set_level(x / 100.0);
          id(fan_speed_2).publish_state(x);
  - platform: template
    id: fan_speed_3
    name: "Fan Speed 3 (GPIO35)"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 50
    restore_value: true
    optimistic: true
    set_action:
      - lambda: |-
          id(pwm_fan_3).set_level(x / 100.0);
          id(fan_speed_3).publish_state(x);
  - platform: template
    id: fan_speed_4
    name: "Fan Speed 4 (GPIO37)"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 50
    restore_value: true
    optimistic: true
    set_action:
      - lambda: |-
          id(pwm_fan_4).set_level(x / 100.0);
          id(fan_speed_4).publish_state(x);

### PWM-выходы для 4 вентиляторов
output:
  - platform: ledc
    id: pwm_fan_1
    pin: GPIO17
    frequency: 25000Hz
    min_power: 0.1
  - platform: ledc
    id: pwm_fan_2
    pin: GPIO18
    frequency: 25000Hz
    min_power: 0.1
  - platform: ledc
    id: pwm_fan_3
    pin: GPIO35
    frequency: 25000Hz
    min_power: 0.1
  - platform: ledc
    id: pwm_fan_4
    pin: GPIO37
    frequency: 25000Hz
    min_power: 0.1

### Блок светодиодного кольца
light:
  - platform: esp32_rmt_led_strip
    id: led_ring
    rgb_order: RBG
    pin: GPIO48
    num_leds: 3
    rmt_channel: 2
    chipset: ws2812
    name: "My Light"
    restore_mode: ALWAYS_ON
    default_transition_length: 0s
    internal: true
